import numpy as np
import BrickWallFixed as bw

def compute_entanglement(n):
    """Splits the circuit at a chosen point and computes the entanglement
    entropy
    """
    # Check number of qubits 
    qubits = len(psi.shape)
    # Contract the qubits from n to the total number of qubits
    contracted_qubits = range(qubits)[n:]
    # Find the partial state
    partial_state = np.tensordot(psi, psi.conj(), 
                                 axes=(contracted_qubits,contracted_qubits))
    
    # Reshape the tensor into a matrix
    partial_state = partial_state.reshape((2**n,2**n))
    # Find the eigenvalues of the matrix
    eigenvalues,_ = np.linalg.eigh(partial_state)
    # Remove any eigenvalues which arise due to rounding errors
    eigenvalues = [eigenvalue for eigenvalue in eigenvalues if eigenvalue>10**(-12)]
    
    entropy = -np.sum(eigenvalues * np.log(eigenvalues))
    
    return entropy


def compute_entanglement2(n):
    """Performs singular valued decomposition to compute entanglement
    """
    # Check number of qubits
    qubits = len(psi.shape)
    # Set initial wavefunction
    phi = psi    
    # Calculate reshaped matrix
    phi = phi.reshape(2**n, 2**(qubits - n))
    
    _,eigenvalues,_ = np.linalg.svd(phi)
    entropy = -np.sum(eigenvalues**2 * np.log(eigenvalues**2))
    
    return entropy

Qubits = 8

Circuit = bw.Circuit(Qubits, 20, 1.5, 3)
psi = Circuit.brick_wall()

split = 4

print(compute_entanglement2(split))

print(compute_entanglement(split))
